const Post = require('../models/Post.js');
const db = require('../db');

const PostController = {};



/**
* Get All Posts
* @description - returns array of all table rows and columns in Posts table.
*/
PostController.getAllPosts = (req, res, next) => {
  const query = {
    text: "SELECT * FROM \"Posts\""
  };

  db.conn.any(query)
    .then(allPosts => res.status(200).send(allPosts))
    .catch(err => res.status(400).send(err));

};

/**
* Add Post
* @requires postId - string - present in req.body
* @requires title - string - present in req.body
* @requires link - string - present in req.body
* @argument metadata - optional, array - in req.body
* @description - creates a new Post and saves to DB
*/
PostController.addNewPost = (req, res, next) => {
  console.log('adding new post', req.body);
  if (!req.body.postId || !req.body.title || !req.body.link || (req.body.metadata && !Array.isArray(req.body.metadata))) return res.status(400).send({ err: 'Invalid request' });

  const newPost = new Post(req.body.postId, req.body.title, req.body.link, req.body.metadata);

  const query = {
    text: "INSERT INTO \"Posts\"(post_id, title, link, metadata) VALUES($1, $2, $3, $4) RETURNING *",
    values: Object.values(newPost)
  };

  db.conn.one(query)
    .then(createdPost => {
      res.status(200).send({
        'msg': 'post successfully created',
        createdPost
      })
    })
    .catch(err => res.status(404).send(err));
};

/**
* Get Post
* @param {id} - required, varchar, unique
* @description - returns table row for matching post id param.  
*                returns 400 if post is not found.
*/
PostController.getOnePost = (req, res, next) => {
  if (!req.params.id) return res.status(400).send({ err: 'Invalid request' });

  const query = {
    text: "SELECT * FROM \"Posts\" WHERE post_id=$1",
    values: [req.params.id]
  };

  db.conn.one(query)
    .then(foundPost => res.status(200).send(foundPost))
    .catch(err => res.status(400).send(err));

};

/**
 * createUpdateString - helper function for updateOnePost method
 * @param {*} pid - required, varchar - represents the post_id for WHERE in string 
 * @param {*} updates - required, object - contains all fields
 * @description - takes in post_id and object of updates where key is column name
 *                and value is row column value.
 *                Outputs query object with text as query string and values as array
 *                of row-column values to update.
 */
const createUpdateQuery = (pid, updates) => {
  let str = "UPDATE \"Posts\" SET";
  const vals = [pid.toString()];
  Object.keys(updates).forEach((key, i) => {
    if (updates[key] !== undefined) {
      if (vals.length > 1) str += ',';
      str += ` ${key}=$${(vals.length + 1).toString()}`;
      vals.push(updates[key]);
    }
  });
  str += ` WHERE post_id=$1 RETURNING *`;
  return {
    text: str,
    values: vals
  };
};

/**
* Update Post
* @param {id} - required, varchar, unique - should match a post ID in table.
* @argument title - optional, varchar - in req.body, if updating.
* @argument link - optional, varchar - in req.body, if updating.
* @argument metadata - optional, array - tags generated by Raddit / Google Image tags.
* @description - updates user row in Posts table if matching post_id is found.
*                returns updated post info.
*/
PostController.updateOnePost = (req, res, next) => {
  if (!req.params.id) return res.status(400).send({ err: 'Invalid request' });
  
  const updates = {
    title: req.body.title,
    link: req.body.link,
    metadata: req.body.metadata
  };

  const query = createUpdateQuery(req.params.id, updates);

  db.conn.one(query)
    .then(updatedPost => res.status(200).send(updatedPost))
    .catch(err => {
      console.log('error updating post', err);
      res.status(400).send(err);
    });
};

/**
* Remove Post
* @param {id} - required, varchar, unique - should match a post ID in table
* @description - deletes user row in Posts table if matching post_id is found.
*/
PostController.removeOnePost = (req, res, next) => {
  if (!req.params.id) return res.status(400).send({ err: 'Invalid request' });

  const query = {
    text: "DELETE FROM \"Posts\" WHERE post_id=$1",
    values: [req.params.id]
  };

  db.conn.any(query)
    .then(deletedPost => {
      res.status(200).send({
        'msg': 'post successfully deleted'
      })
    })
    .catch(err => res.status(404).send(err));
};

module.exports = PostController;
